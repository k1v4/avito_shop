// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/k1v4/avito_shop/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IShopRepository is an autogenerated mock type for the IShopRepository type
type IShopRepository struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, userId, itemId, quantity
func (_m *IShopRepository) BuyItem(ctx context.Context, userId int, itemId int, quantity int) error {
	ret := _m.Called(ctx, userId, itemId, quantity)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, userId, itemId, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: ctx, username
func (_m *IShopRepository) FindUser(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemById provides a mock function with given fields: ctx, itemId
func (_m *IShopRepository) GetItemById(ctx context.Context, itemId int) (string, error) {
	ret := _m.Called(ctx, itemId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, itemId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, itemId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByName provides a mock function with given fields: ctx, itemId
func (_m *IShopRepository) GetItemByName(ctx context.Context, itemId string) (entity.Item, error) {
	ret := _m.Called(ctx, itemId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByName")
	}

	var r0 entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Item, error)); ok {
		return rf(ctx, itemId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Item); ok {
		r0 = rf(ctx, itemId)
	} else {
		r0 = ret.Get(0).(entity.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemUser provides a mock function with given fields: ctx, userId
func (_m *IShopRepository) GetItemUser(ctx context.Context, userId int) (entity.Inventory, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemUser")
	}

	var r0 entity.Inventory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Inventory, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Inventory); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(entity.Inventory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *IShopRepository) GetUserById(ctx context.Context, userId int) (entity.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeRecord provides a mock function with given fields: ctx, fromUserId, toUserId, amount
func (_m *IShopRepository) MakeRecord(ctx context.Context, fromUserId int, toUserId int, amount int) error {
	ret := _m.Called(ctx, fromUserId, toUserId, amount)

	if len(ret) == 0 {
		panic("no return value specified for MakeRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, fromUserId, toUserId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, username, passhash
func (_m *IShopRepository) SaveUser(ctx context.Context, username string, passhash []byte) (int, error) {
	ret := _m.Called(ctx, username, passhash)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (int, error)); ok {
		return rf(ctx, username, passhash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) int); ok {
		r0 = rf(ctx, username, passhash)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, username, passhash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeGiveCoins provides a mock function with given fields: ctx, userId, amount
func (_m *IShopRepository) TakeGiveCoins(ctx context.Context, userId int, amount int) error {
	ret := _m.Called(ctx, userId, amount)

	if len(ret) == 0 {
		panic("no return value specified for TakeGiveCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TakeRecords provides a mock function with given fields: ctx, userId
func (_m *IShopRepository) TakeRecords(ctx context.Context, userId int) ([]entity.BothDirection, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for TakeRecords")
	}

	var r0 []entity.BothDirection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.BothDirection, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.BothDirection); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BothDirection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIShopRepository creates a new instance of IShopRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIShopRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IShopRepository {
	mock := &IShopRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
