// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/k1v4/avito_shop/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IShopService is an autogenerated mock type for the IShopService type
type IShopService struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, userId, itemName
func (_m *IShopService) BuyItem(ctx context.Context, userId int, itemName string) error {
	ret := _m.Called(ctx, userId, itemName)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userId, itemName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInfo provides a mock function with given fields: ctx, userId
func (_m *IShopService) GetInfo(ctx context.Context, userId int) (entity.ResponseInfo, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 entity.ResponseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.ResponseInfo, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.ResponseInfo); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(entity.ResponseInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *IShopService) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, username, password
func (_m *IShopService) Register(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoins provides a mock function with given fields: ctx, toUserName, fromUserId, amount
func (_m *IShopService) SendCoins(ctx context.Context, toUserName string, fromUserId int, amount int) error {
	ret := _m.Called(ctx, toUserName, fromUserId, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) error); ok {
		r0 = rf(ctx, toUserName, fromUserId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIShopService creates a new instance of IShopService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIShopService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IShopService {
	mock := &IShopService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
